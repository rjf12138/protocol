json协议要求
1. json有这些子集构成：6种结构字符，字符串，数字和三种字面值，不支持注释。

2. 结构字符：
    a. {}[],:
    b. 除了上面提到的还有：空格(' '), 制表符(\t), 换行符(\n)，回车符(\r)

3. 值必须是：对象，数组，数字，字符串，或是字面值(true, false, null)
    值的要求：
    a. 字面值必须是小写的

    b. 对象必须是由花括号({})包围的零个或多个名字值对。名字是字符串，由冒号(:)来分隔名字
        和值。在对象中的每个名字值对由逗号(,)来分割。
        结构：object = begin-object [ member *( value-separator member ) ] 
        end-object

    c. 数组是由方括号([])包围的零个或多个值,里面的数值要是同一类型的。
        结构：array = begin-array [ value *( value-separator value ) ] end-array

    d. 数值包含整数部分或小数部分，只支持十进制，八进制和十六进制都不被允许。整数部分以零开
        头是不被允许的。不能表示为具体数值的的序列是不被允许的（infinite或NaN），前面可以加
        正负号(+-)表示数字的正负，正号可以省略。
        结构：number = [ minus ] int [ frac ] [ exp ]
        数值大小限制为 int32 所支持的范围。

    e. 字符串。除了需要转义的字符之外，所有 Unicode 支持的字符要有。字符串由双引号所包围。
        转义字符：有两种方式可以完成转义，这里只支持使用反斜杠(\)来转义。
        需要转义的字符：
                    char = unescaped /
                    escape (
                        %x22 /          ; "    quotation mark  U+0022
                        %x5C /          ; \    reverse solidus U+005C
                        %x2F /          ; /    solidus         U+002F
                        %x62 /          ; b    backspace       U+0008
                        %x66 /          ; f    form feed       U+000C
                        %x6E /          ; n    line feed       U+000A
                        %x72 /          ; r    carriage return U+000D
                        %x74 /          ; t    tab             U+0009
                        %x75 4HEXDIG )  ; uXXXX                U+XXXX
4. json的文本编码采用：先只支持asiic
    UTF-8
    https://blog.csdn.net/zhusongziye/article/details/84261211

编程要求：
1. json要求的类型：数值，字符串，布尔变量，对象，数组，null都单独创建有对象。

    数值：值的范围取决于：int类型和double类型
    字符串： 功能取决于std::string
    布尔变量： 功能取决于bool类型
    null: 表示为空，json表示格式是字符串"null"
    对象： 由{}包围可以为空，内部值以key-value形式保存。key为字符串，
            value类型可以是json中的任意类型， key不能重复
    数组： 由[]包围可以为空，内部值可以为json的任意类型且类型不必一致。

    (1):数值类型判断
        对象：以 { 开始
        字符串: 以 " 开始
        布尔变量: 以 t 或者 f 开始
        null: 以 n 开始
        数值：0-9 或者 +,- 开始
        数组：以 [ 开始

2. 类型对象要具备的功能：
    1. 解析对象对应的类型
    2. 生成类型值对应的json表示格式
    3. 能将生成的json表示格式输出到流中（std::cout, std::cerr, std::ofstream等）
    4. 公共功能定义在类型的父类中：根据当前字符得得出接下来要解析的是什么类型
    5. 判等，赋值，如果类型对应有c++的基础类型，则要支持强转
    6. 出现异常时抛出错误

3. json文本处理分为两步：
    1. 精简输入的文本，目的是去除不必要的格式控制字符（' ', '\t', '\n', '\r'）。
    2. 按顺序读取精简完的文本，根据每个类型开头的字符判断接下来的类型，然后调用对应类型的解析函数。

4. 值保存和转换
    1. 为了值输出时类型一致，创建一个用于转换的类
        1. 可以将任何json类型赋值给它，他也可以赋值给任何json类型，前提是它内部保存的值和要赋值的类型一致
        2. 按json表示格式输出保存的json格式
        3. 判等，输出到流中
    2. json的值只能保存在对象和数组中
    3. 对象根据key返回对应的值，数组根据下标反回对应的值。

5. 错误处理：
    1. 类型判断是根据当前的字符确定对象类型，这并不能保证类型一定正确。
        当出现类型调用函数进行解析时出现无法解析的地方就会抛出异常。
    2. 异常信息：出现在程序中的位置，报错的原因，该位置附近的json文本内容。
    3. 处理异常时要点：异常可以被忽略那就应该捕捉异常，如果不该忽略就不要捕捉异常

6. 额外添加的扩展：json协议不支持注释，此处实现要支持"//"开头的注释，这个注释可以单独一行或是跟在json那行的末尾，不能出现在json文本前面。